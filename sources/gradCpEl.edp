/* Calculation of the sensitivity (i.e. integrand of the shape derivative)
   and the shape gradient (not a descent direction) for the compliance functional */
include "./sources/inout.idp"
include "./sources/macros.idp"

/* Get mesh and sol names */
string MESH       = getsParam(EXCHFILE,"MeshName");
string DISPLPATTERN      = getsParam(EXCHFILE,"DisplName");
string DISPLEXTENSION    = getsParam(EXCHFILE,"DisplExtension");
string NORVEC     = getsParam(EXCHFILE,"NorvecName");
string DIFFCP     = getsParam(EXCHFILE,"DiffName");
string GRADCP     = getsParam(EXCHFILE,"GradName");
int REFINT        = getiParam(EXCHFILE,"Refint");
int REFDIR        = getiParam(EXCHFILE,"Dirichlet");
int REFNEU        = getiParam(EXCHFILE,"Neumann");
int REFFOU        = getiParam(EXCHFILE,"Fourier");
int REFISO        = getiParam(EXCHFILE,"ReferenceBnd");

/* Loading mesh */
mesh Th = readmesh(MESH);

/* Finite element spaces and functions */
fespace Vh(Th,P1);
fespace Vh0(Th,P0);

//Vh ux,uy, wx, wy, T, Tnew, R, Text;
Vh norvecx, norvecy;
//Vh TEMPFIELD;
Vh sd, g;
Vh0 reg = region;
Vh derivIntegral, derivFinal, deriv;

/*Load normal vector*/
loadvec2(NORVEC,norvecx[],norvecy[]);

//TEMPFIELD[] = wy[] - uy[];

/* Computation of the mean curvature H */
Vh Hcurv; // mean curvature. Hcurv =?= div(norvec)
Hcurv = divg(norvecx, norvecy);

/* Mesh of the interior part and corresponding FE spaces */
mesh Thi = trunc(Th,(reg(x,y) == REFINT),label=REFINT);
fespace Vhi(Thi,P1);
fespace Vh0i(Thi,P0);
Vhi uxi,uyi, norvecix, norveciy;
/*Vhi derivi;*/

norvecix = norvecx;
norveciy = norvecy;

macro nGradn(vx, vy) (norvecix * (dx(vx)*norvecix + dy(vx)*norveciy)+ norveciy * (dx(vy)*norvecix + dy(vy)*norveciy))  //EOM
	
	
loadvec2(combinestrings(DISPLPATTERN, 100, DISPLEXTENSION),uxi[],uyi[]);

/* Compute the integral part of the derivative */
deriv = - 0.5 * sigeps(uxi, uyi, uxi, uyi);


/* Linear form associated to the shape derivative, and associated table of values*/
varf shapeder(sd,v) = int1d(Thi,REFISO)(deriv*v)+on(REFNEU, sd=0.0);
sd[] = shapeder(0,Vh);

/* Gradient of the volume functional after (scalar) extension / regularization */
varf innerproduct(g,v) = psreg(g,v);
matrix A = innerproduct(Vh,Vh);
g[] = A^-1 * sd[];

/* Resolution of the extension - regularization problem */
/*Vh gg, v;
problem velext(gg,v) = psreg(gg,v)
                        - int1d(Thi,REFISO)(deriv*v)
                        + on(REFNEU,gg=0.0);

velext;*/

/* Solve problem and save solution */
printsol(DIFFCP,sd[]);
printsol(GRADCP,g[]);

//printsol(TMP,TEMPFIELD[]);
